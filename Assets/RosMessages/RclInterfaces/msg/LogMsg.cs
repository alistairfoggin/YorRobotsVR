//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.RclInterfaces
{
    [Serializable]
    public class LogMsg : Message
    {
        public const string k_RosMessageName = "rcl_interfaces/Log";
        public override string RosMessageName => k_RosMessageName;

        // #
        // # Severity level constants
        // # 
        // # These logging levels follow the Python Standard
        // # https://docs.python.org/3/library/logging.html#logging-levels
        // # And are implemented in rcutils as well
        // # https://github.com/ros2/rcutils/blob/35f29850064e0c33a4063cbc947ebbfeada11dba/include/rcutils/logging.h#L164-L172
        // # This leaves space for other standard logging levels to be inserted in the middle in the future,
        // # as well as custom user defined levels.
        // # Since there are several other logging enumeration standard for different implementations,
        // # other logging implementations may need to provide level mappings to match their internal implementations.
        // #
        //  Debug is for pedantic information, which is useful when debugging issues.
        public const sbyte DEBUG = 10;
        //  Info is the standard informational level and is used to report expected
        //  information.
        public const sbyte INFO = 20;
        //  Warning is for information that may potentially cause issues or possibly unexpected
        //  behavior.
        public const sbyte WARN = 30;
        //  Error is for information that this node cannot resolve.
        public const sbyte ERROR = 40;
        //  Information about a impending node shutdown.
        public const sbyte FATAL = 50;
        // #
        // # Fields
        // #
        //  Timestamp when this message was generated by the node.
        public BuiltinInterfaces.TimeMsg stamp;
        //  Corresponding log level, see above definitions.
        public byte level;
        //  The name representing the logger this message came from.
        public string name;
        //  The full log message.
        public string msg;
        //  The file the message came from.
        public string file;
        //  The function the message came from.
        public string function;
        //  The line in the file the message came from.
        public uint line;

        public LogMsg()
        {
            this.stamp = new BuiltinInterfaces.TimeMsg();
            this.level = 0;
            this.name = "";
            this.msg = "";
            this.file = "";
            this.function = "";
            this.line = 0;
        }

        public LogMsg(BuiltinInterfaces.TimeMsg stamp, byte level, string name, string msg, string file, string function, uint line)
        {
            this.stamp = stamp;
            this.level = level;
            this.name = name;
            this.msg = msg;
            this.file = file;
            this.function = function;
            this.line = line;
        }

        public static LogMsg Deserialize(MessageDeserializer deserializer) => new LogMsg(deserializer);

        private LogMsg(MessageDeserializer deserializer)
        {
            this.stamp = BuiltinInterfaces.TimeMsg.Deserialize(deserializer);
            deserializer.Read(out this.level);
            deserializer.Read(out this.name);
            deserializer.Read(out this.msg);
            deserializer.Read(out this.file);
            deserializer.Read(out this.function);
            deserializer.Read(out this.line);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.stamp);
            serializer.Write(this.level);
            serializer.Write(this.name);
            serializer.Write(this.msg);
            serializer.Write(this.file);
            serializer.Write(this.function);
            serializer.Write(this.line);
        }

        public override string ToString()
        {
            return "LogMsg: " +
            "\nstamp: " + stamp.ToString() +
            "\nlevel: " + level.ToString() +
            "\nname: " + name.ToString() +
            "\nmsg: " + msg.ToString() +
            "\nfile: " + file.ToString() +
            "\nfunction: " + function.ToString() +
            "\nline: " + line.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
